import re
import sys
import threading
import time
import urllib.request
from datetime import datetime

from PySide6.QtCore import (QByteArray, QMetaObject, QRect,
                            QSize, Qt)
from PySide6.QtGui import (QFont, QIcon,
                           QImage, QPixmap, QStandardItem, QStandardItemModel)
from PySide6.QtWidgets import (QAbstractSpinBox, QApplication, QCheckBox, QFrame,
                               QLabel, QListView, QPushButton, QSpinBox, QMainWindow, QAbstractItemView)


class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setWindowIcon(QIcon(QPixmap(QSize(93, 93)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))

class EqListV(QListView):
    def __init__(self, parent=None):
        super(EqListV, self).__init__(parent)

    def mousePressEvent(self, event):
        if not self.indexAt(event.position().toPoint()).isValid():
            self.clearSelection()

class Ui_EarthQuake(object):
    def setupUi(self, EarthQuake):
        if not EarthQuake.objectName():
            EarthQuake.setObjectName("EarthQuake")
        EarthQuake.resize(1115, 715)
        font = QFont()
        font.setFamilies(["Arial"])
        font.setPointSize(15)
        EarthQuake.setFont(font)
        EarthQuake.setStyleSheet("QWidget{color: Red;background: #2e2e2d;}")
        self.EqOneView = QLabel(EarthQuake)
        self.EqOneView.setObjectName("EqOneView")
        self.EqOneView.setGeometry(QRect(10, 10, 521, 421))
        self.EqOneView.setFont(font)
        self.EqOneView.setStyleSheet("QLabel{background: #1a1a1a;color: White;}")
        self.EqOneView.setFrameShape(QFrame.NoFrame)
        self.EqOneView.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)
        self.EqOneView.setIndent(-1)
        self.EqListView = EqListV(EarthQuake)
        self.EqListView.setObjectName("EqListView")
        self.EqListView.setGeometry(QRect(540, 0, 581, 721))
        self.EqListView.setFont(font)
        self.EqListView.setStyleSheet("QListView{background: #1a1a1a; color: White;}")
        self.EqListView.setFrameShape(QFrame.Box)
        self.EqListView.setViewMode(QListView.ListMode)
        self.EqListView.setItemAlignment(Qt.AlignRight)
        self.EqListViewModel = QStandardItemModel(EarthQuake)
        self.RefreshButton = QPushButton(EarthQuake)
        self.RefreshButton.setObjectName("RefreshButton")
        self.RefreshButton.setGeometry(QRect(300, 580, 201, 61))
        self.RefreshButton.setFont(font)
        self.RefreshButton.setStyleSheet("QPushButton:checked{background: #080808;}\n"
"QPushButton{color: Red; background: #1a1a1a;}")
        self.RefreshButton.setCheckable(False)
        self.RefreshButton.setChecked(False)
        self.RefreshButton.clicked.connect(self.AutoRefreshButtons)
        self.AutoRefresh = QCheckBox(EarthQuake)
        self.AutoRefresh.setObjectName("AutoRefresh")
        self.AutoRefresh.setGeometry(QRect(20, 580, 121, 31))
        self.AutoRefresh.setFont(font)
        self.AutoRefresh.setLayoutDirection(Qt.LeftToRight)
        self.AutoRefresh.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.RefreshRate = QSpinBox(EarthQuake)
        self.RefreshRate.setObjectName("RefreshRate")
        self.RefreshRate.setGeometry(QRect(130, 630, 81, 31))
        self.RefreshRate.setFont(font)
        self.RefreshRate.setStyleSheet("QSpinBox{background: #1a1a1a;color: Red;}")
        self.RefreshRate.setWrapping(False)
        self.RefreshRate.setFrame(True)
        self.RefreshRate.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)
        self.RefreshRate.setButtonSymbols(QAbstractSpinBox.UpDownArrows)
        self.RefreshRate.setMinimum(1)
        self.RefreshRate.setStepType(QAbstractSpinBox.DefaultStepType)
        self.RefreshRateLabel = QLabel(EarthQuake)
        self.RefreshRateLabel.setObjectName("RefreshRateLabel")
        self.RefreshRateLabel.setGeometry(QRect(20, 630, 101, 31))
        self.RefreshRateLabel.setFont(font)
        self.RefreshRateLabel.setStyleSheet("QLabel{background: #1a1a1a; color:Red;}")
        self.RefreshRateLabel.setLineWidth(0)
        self.RefreshRateLabel.setAlignment(Qt.AlignCenter)
        self.RefreshRateLabel2 = QLabel(EarthQuake)
        self.RefreshRateLabel2.setObjectName("RefreshRateLabel2")
        self.RefreshRateLabel2.setGeometry(QRect(220, 630, 21, 31))
        self.RefreshRateLabel2.setFont(font)
        self.RefreshRateLabel2.setStyleSheet("QLabel{background: #1a1a1a; color:Red;}")
        self.RefreshRateLabel2.setLineWidth(0)
        self.RefreshRateLabel2.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)
        self.Logo = QLabel(EarthQuake)
        self.Logo.setObjectName("Logo")
        self.Logo.setGeometry(QRect(20, 450, 91, 91))
        self.Logo.setPixmap(QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))
        self.Logo.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.TimeLabel = QLabel(EarthQuake)
        self.TimeLabel.setObjectName("TimeLabel")
        self.TimeLabel.setGeometry(QRect(340, 695, 201, 21))
        self.TimeLabel.setFont(font)
        self.TimeLabel.setStyleSheet("QLabel{background: #1a1a1a; color: White;}")
        self.TimeLabel.setAlignment(Qt.AlignCenter)
        self.label = QLabel(EarthQuake)
        self.label.setObjectName("label")
        self.label.setGeometry(QRect(130, 450, 391, 91))
        font2 = QFont()
        font2.setFamilies(["Arial"])
        font2.setPointSize(27)
        self.label.setFont(font2)
        self.label.setStyleSheet("QLabel{background: #1a1a1a;color: Orange;}")
        self.label.setAlignment(Qt.AlignCenter)
        threading.Thread(target=self.timeSet, daemon=True).start()
        threading.Thread(target=self.One_Eq, daemon=True).start()
        threading.Thread(target=self.Hist_Main, daemon=True).start()
        self.retranslateUi(EarthQuake)

        QMetaObject.connectSlotsByName(EarthQuake)

    def AutoRefreshButtons(self):
        if self.AutoRefresh.checkState() == Qt.Checked:
            threading.Thread(target=self.AutoRefresher, daemon=True).start()
        threading.Thread(target=self.One_Eq, daemon=True).start()
        threading.Thread(target=self.Hist_Main, daemon=True).start()

    def AutoRefresher(self):
        seconds = self.RefreshRate.value() * 60
        while True:
            if self.AutoRefresh.checkState() == Qt.Unchecked:
                break
            threading.Thread(target=self.One_Eq, daemon=True).start()
            threading.Thread(target=self.Hist_Main, daemon=True).start()
            time.sleep(seconds)

    def timeSet(self):
        while True:
            self.TimeLabel.setText(datetime.now().strftime('%Y/%m/%d %H:%M:%S'))
            time.sleep(0.98)

    def One_tg(self, source, tag):
        _hd = source.read().decode()
        _ht = tag.split('.')[0]
        _tn = '.'.join(tag.split('.')[1:])
        _tgi = ''.join(_hd.split('<{} class="{}">'.format(_ht, _tn))[1:])
        _tgs = _tgi.split('</{}>'.format(_ht))[0].replace('  ', '').split('<{} '.format(_ht))[0]
        _tga = re.sub('(\n\n)', '', _tgs)
        _tgt = re.sub('<!.+\n', '', _tga).replace('><', '>\n<')
        return _tgt

    def One_r(self, d):
        _r0 = '発生時刻'
        _r1 = '震源地'
        _r2 = '最大震度'
        _r3 = 'マグニチュード'
        _r4 = '深さ'
        _r5 = '緯度/経度'
        _r6 = '情報'
        _rd0 = '・発生時刻: '
        _rd1 = '\n・震源地: '
        _rd2 = '\n・最大震度: '
        _rd3 = '\n・地震の規模: M'
        _rd4 = '\n・深さ: '
        _rd5 = '\n・緯度/経度: '
        _rd6 = '\n・津波情報: '
        _sw = '。'
        _eq = re.sub('([ ])', '', d)
        _eq1 = re.sub('(\n\n)', '', _eq)
        _eq2 = _eq1.replace(_r0, _rd0)
        _eq3 = _eq2.replace(_r1, _rd1)
        _eq4 = _eq3.replace(_r2, _rd2)
        _eq5 = _eq4.replace(_r3, _rd3)
        _eq6 = _eq5.replace(_r4, _rd4)
        _eq7 = _eq6.replace(_r5, _rd5)
        _eq8 = _eq7.replace(_r6, _rd6).split(_sw)[0]

        return _eq8.split('\n')

    def One_Eq(self):
        _u = "https://typhoon.yahoo.co.jp/weather/earthquake/"
        _ua = 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'
        _d = urllib.request.urlopen(urllib.request.Request(_u, headers={'User-Agent': _ua}))
        _t = self.One_tg(_d, 'div.eqDetail')

        _dq = str(_t)
        if '<td>1</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 255, 255);}')
        if '<td>2</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(0, 10, 255);}')
        if '<td>3</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(0, 102, 0);}')
        if '<td>4</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 10, 0);}')
        if '<td>5弱</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 1, 0);}')
        if '<td>5強</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(100, 80, 0);}')
        if '<td>6弱</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 1 , 255);}')
        if '<td>6強</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 0, 0);}')
        if '<td>7</td>' in _dq:
            self.EqOneView.setStyleSheet('QLabel{background: #1a1a1a;color: rgb(255, 0, 255);}')
        self.EqOneView.setText('\n\n'.join(self.One_r(''.join(re.findall('<.+>(.+)<.+>', _t)))))

    def colorIcon(self, color):
        if color == 0: # Unknow
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 10: # 1
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 20: # 2
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 30: # 3
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 40: # 4
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 50: # 5-
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 51: # 5+
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 60: # 6-
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 61: # 6+
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))
        if color == 70: # 7
            return QPixmap(QSize(91, 91)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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')))

    def Hist_tg(self, source, _tag1, _tag2, _tag3):
        _hd = source.read().decode()
        _ht1 = _tag1.split('.')[0]
        _tn1 = '.'.join(_tag1.split('.')[1:])
        _ht2 = _tag2.split('.')[0]
        _tn2 = '.'.join(_tag2.split('.')[1:])
        _ht3 = _tag3.split('.')[0]
        _tn3 = '.'.join(_tag3.split('.')[1:])
        _tn1 = re.findall('<{} class="{}">(.+)'.format(_ht1, _tn1, _ht1), _hd)
        _tn2 = [_t for _t in re.findall('<{} class="{}">(.+)</{}>'.format(_ht2, _tn2, _ht2), _hd) if '震源地：' in _t]
        _ta = ''.join(_hd.split('<{} class="{}">'.format(_ht3, _tn3))[1:]).split('</div>')[0]
        _tb = [_y.replace('<em>', '').replace('</em>', '') for _y in re.findall('-->(.+)<', _ta)]
        _tt = [re.sub('<em (.+)>', '', _y) for _y in _tb]
        _tc = '#'.join(_tt).replace('#最', '),最')
        _te = ''.join(_tc.split('#')).replace('M', ' (M').split(',')
        _tn3 = [_yt.replace(_yt[-1], _yt[-1] + ')').replace(').', '.') if not ')' in _yt else _yt for _yt in _te]
        return _tn1, _tn2, _tn3

    def Hist_Main(self):
        [[self.EqListViewModel.removeRow(i) for i in range(self.EqListViewModel.rowCount())] for _ in range(6)]
        _u = "https://typhoon.yahoo.co.jp/weather/earthquake/"
        _ua = 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'
        _g = urllib.request.urlopen(urllib.request.Request(_u, headers={'User-Agent': _ua}), timeout=1000)
        _ht = self.Hist_tg(_g, 'dd.subText', 'dt.title', 'dd.eqScale')
        _es = _ht[0]
        _et = _ht[1]
        _esc = _ht[2]

        for _p in range(10):
            if _esc[_p].split(' ')[1].split(')')[0] == '1':
                _c = self.colorIcon(10)
            if _esc[_p].split(' ')[1].split(')')[0] == '2':
                _c = self.colorIcon(20)
            if _esc[_p].split(' ')[1].split(')')[0] == '3':
                _c = self.colorIcon(30)
            if _esc[_p].split(' ')[1].split(')')[0] == '4':
                _c = self.colorIcon(40)
            if _esc[_p].split(' ')[1].split(')')[0] == '5弱':
                _c = self.colorIcon(50)
            if _esc[_p].split(' ')[1].split(')')[0] == '5強':
                _c = self.colorIcon(51)
            if _esc[_p].split(' ')[1].split(')')[0] == '6弱':
                _c = self.colorIcon(60)
            if _esc[_p].split(' ')[1].split(')')[0] == '6強':
                _c = self.colorIcon(61)
            if _esc[_p].split(' ')[1].split(')')[0] == '7':
                _c = self.colorIcon(70)
            if _esc[_p].split(' ')[1].split(')')[0] == '---':
                _esc[_p] = _esc[_p].replace('---', '不明')
                _c = self.colorIcon(0)
            _esc[_p] = _esc[_p].split(' ')[0] + ' ' + _esc[_p].split(' ')[1] + ' ' + ' '.join(_esc[_p].split(' ')[2:])
            EqText = QStandardItem('{}\n{}\n{}'.format(_es[_p], _et[_p], _esc[_p]))
            self.EqListViewModel.appendRow(EqText)
            EqText.setData(QIcon(_c), Qt.DecorationRole)
        self.EqListView.setIconSize(QSize(75, 75))
        self.EqListView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.EqListView.setModel(self.EqListViewModel)

    def retranslateUi(self, EarthQuake):
        EarthQuake.setWindowTitle("EarthQuakeInfomation")
        self.RefreshButton.setText("更新")
        self.AutoRefresh.setText("自動更新")
        self.RefreshRateLabel.setText("更新間隔:")
        self.RefreshRateLabel2.setText("分")
        self.label.setText("EarthquakeInfomation")

def main():
    App = QApplication(sys.argv)
    Main_Window = MainWindow()
    Ui = Ui_EarthQuake()
    Ui.setupUi(Main_Window)
    Main_Window.setFixedSize(Main_Window.size())
    Main_Window.show()
    App.exec()

if __name__ == '__main__':
    main()
